// Generated by CoffeeScript 1.3.3
(function() {
  var CJsl, partial,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  partial = function(cls, prototypes) {
    var callback, name;
    for (name in prototypes) {
      callback = prototypes[name];
      cls.prototype[name] = callback;
    }
    return cls;
  };

  CJsl = (function() {

    function CJsl() {}

    CJsl.prototype.xmlns = "http://www.w3.org/2000/svg";

    CJsl.prototype.xlinkns = "http://www.w3.org/1999/xlink";

    CJsl.prototype.__genid = 0;

    CJsl.prototype.genId = function() {
      return "jsl-" + (++this.__genid);
    };

    CJsl.prototype.create = function(name) {
      var me;
      me = this;
      return document.createElementNS(me.xmlns, name);
    };

    CJsl.prototype.partial = partial;

    CJsl.prototype.random = function(num) {
      return Math.floor(Math.random() * num);
    };

    CJsl.prototype.apply = function() {
      var des, i, key, key1, val, val1, _i, _len;
      i = 0;
      for (key = _i = 0, _len = arguments.length; _i < _len; key = ++_i) {
        val = arguments[key];
        if (i === 0) {
          i = 1;
          des = val;
          if (des === void 0) {
            des = {};
          }
          continue;
        }
        for (key1 in val) {
          val1 = val[key1];
          des[key1] = val1;
        }
      }
      return des;
    };

    return CJsl;

  })();

  window.Jsl = new CJsl();

  Jsl.CElement = (function(_super) {

    __extends(CElement, _super);

    CElement.prototype.id = 0;

    CElement.prototype.elTagName = "g";

    CElement.prototype.doc = null;

    CElement.prototype.renderTo = null;

    function CElement(config) {
      var me;
      me = this;
      config = Jsl.apply({
        id: Jsl.genId()
      }, config);
      this.apply(config);
      me.doc = Jsl.create(me.elTagName);
      me.doc.setAttributeNS(null, "id", me.id);
      me.init();
    }

    CElement.prototype.init = function() {};

    CElement.prototype.draw = function() {
      var me;
      me = this;
      if (me.renderTo) {
        return me.renderTo.appendChild(me.doc);
      }
    };

    CElement.prototype.apply = function() {
      var config, key, me, val, _results;
      me = this;
      config = Jsl.apply.apply(this, arguments);
      _results = [];
      for (key in config) {
        val = config[key];
        _results.push(me[key] = val);
      }
      return _results;
    };

    CElement.prototype.attr = function(obj) {
      var doc, key, me, val;
      me = this;
      doc = me.doc;
      if (typeof obj === "string") {
        return doc.getAttributeNS(null, obj);
      }
      for (key in obj) {
        val = obj[key];
        doc.setAttributeNS(null, key, val);
      }
      return me;
    };

    CElement.prototype.css = function(obj) {
      var a, b, c, d, f, i, j, me, rs;
      me = this;
      a = me.attr("style");
      b = a.trim().split(";");
      c = b.pop().trim();
      if (c !== "") {
        b.push(c);
      }
      a = b.join(";") + ";";
      b = a.trim().split(";");
      for (i in obj) {
        f = false;
        j = 0;
        while (j < b.length) {
          d = b[j].trim();
          if (d.match("(" + i + ")[^:]*.([^;]*)") != null) {
            b[j] = i + ":" + obj[i];
            f = true;
            break;
          }
          j++;
        }
        if (!f) {
          b.push(i + ":" + obj[i]);
        }
      }
      rs = [];
      i = 0;
      while (i < b.length) {
        a = b[i].trim();
        if (a !== "") {
          rs.push(a);
        }
        i++;
      }
      a = rs.join(";");
      return me.attr({
        style: a
      });
    };

    return CElement;

  })(Object);

}).call(this);
